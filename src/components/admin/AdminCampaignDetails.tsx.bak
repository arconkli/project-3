import React, { useState, useEffect } from 'react';
import { 
  Check, X, DollarSign, Users, TrendingUp, Calendar, Globe, 
  FileText, AlertCircle, Info, Eye, CheckCircle, XCircle, 
  TrendingDown, BarChart, Target, Award, MessageCircle,
  Building2, Briefcase, PieChart, Split, BarChart3
} from 'lucide-react';
import { formatMoney, formatNumber } from '@/utils/format';
import type { Campaign } from '@/types/brand';

interface AdminCampaignDetailsProps {
  campaign: Campaign;
  onClose: () => void;
  onApprove?: (campaign: Campaign, notes?: string) => void;
  onReject?: (campaign: Campaign, reason: string) => void;
}

type BudgetAllocation = {
  original: number;
  repurposed: number;
};

type ViewEstimates = {
  total: number;
  original: number;
  repurposed: number;
};

const AdminCampaignDetails: React.FC<AdminCampaignDetailsProps> = ({
  campaign,
  onClose,
  onApprove,
  onReject
}) => {
  const [rejectReason, setRejectReason] = useState('');
  const [recommendations, setRecommendations] = useState('');
  const [approvalNotes, setApprovalNotes] = useState('');
  const [showRejectDialog, setShowRejectDialog] = useState(false);
  const [activeTab, setActiveTab] = useState<'overview' | 'performance' | 'creators' | 'content' | 'business'>('overview');

  const isPending = campaign.status === 'pending_approval' || 
                   campaign.status === 'pending-approval' || 
                   campaign.status === 'draft';

  useEffect(() => {
    console.log('Campaign Data:', campaign);
    console.log('Requirements:', campaign.requirements);
    console.log('Budget Allocation:', campaign.requirements?.budget_allocation);
    console.log('View Estimates:', campaign.requirements?.view_estimates);
  }, [campaign]);

  // Helper function to safely get nested fields
  const getCampaignField = (fieldOptions: string[], fallback: any = null): any => {
    for (const field of fieldOptions) {
      const value = field.split('.').reduce((obj: any, key: string) => obj?.[key], campaign);
      if (value !== undefined && value !== null) {
        return value;
      }
    }
    return fallback;
  };

  // Calculate campaign data when not available
  const calculateCampaignData = (dataType: 'view_estimates' | 'budget_allocation'): ViewEstimates | BudgetAllocation => {
    const contentType = getCampaignField(['contentType', 'content_type', 'type'], 'both') as 'original' | 'repurposed' | 'both';
    const budget = Number(getCampaignField(['budget', 'total_budget'], 0));
    const originalRate = Number(getCampaignField(['requirements.payoutRate.original', 'requirements.payout.original'], 500));
    const repurposedRate = Number(getCampaignField(['requirements.payoutRate.repurposed', 'requirements.payout.repurposed'], 250));
    
    // Default budget allocation based on content type
    let budgetAllocation: BudgetAllocation = {
      original: 50,
      repurposed: 50
    };
    
    if (contentType === 'original') {
      budgetAllocation = { original: 100, repurposed: 0 };
    } else if (contentType === 'repurposed') {
      budgetAllocation = { original: 0, repurposed: 100 };
    }
    
    if (dataType === 'budget_allocation') {
      return budgetAllocation;
    }
    
    // Calculate view estimates based on budget allocation and rates
    const originalBudget = budget * (budgetAllocation.original / 100);
    const repurposedBudget = budget * (budgetAllocation.repurposed / 100);
    
    const originalViews = originalBudget > 0 ? (originalBudget / originalRate) * 1000000 : 0;
    const repurposedViews = repurposedBudget > 0 ? (repurposedBudget / repurposedRate) * 1000000 : 0;
    const totalViews = originalViews + repurposedViews;
    
    return {
      total: totalViews,
      original: originalViews,
      repurposed: repurposedViews
    };
  };

  // Function to handle rejection with both reason and recommendations
  const handleReject = () => {
    if (rejectReason.trim()) {
      const rejectionFeedback = JSON.stringify({
        reasons: rejectReason.trim(),
        recommendations: recommendations.trim()
      });
      onReject?.(campaign, rejectionFeedback);
    }
  };

  const renderMetricCard = (title: string, value: string | number, icon: React.ReactNode, trend?: number) => (
    <div className="p-4 bg-black/20 border border-gray-800 rounded-lg">
      <div className="flex items-center justify-between mb-2">
        <span className="text-gray-400">{title}</span>
        {icon}
      </div>
      <div className="flex items-end gap-2">
        <span className="text-2xl font-bold">{value}</span>
        {trend !== undefined && (
          <span className={`flex items-center text-sm ${trend >= 0 ? 'text-green-400' : 'text-red-400'}`}>
            {trend >= 0 ? <TrendingUp className="h-4 w-4" /> : <TrendingDown className="h-4 w-4" />}
            {Math.abs(trend)}%
          </span>
        )}
      </div>
    </div>
  );

  const renderBudgetBreakdown = () => {
    console.log('Rendering budget breakdown with:', {
      totalBudget: campaign.budget,
      budgetAllocation: campaign.requirements?.budget_allocation,
      rawBudgetAllocation: campaign.requirements?.budget_allocation
    });

    const totalBudget = campaign.budget || 0;
    const budgetAllocation = campaign.requirements?.budget_allocation || calculateCampaignData('budget_allocation') as BudgetAllocation;
    
    console.log('Calculated budget values:', {
      totalBudget,
      budgetAllocation,
      originalBudget: (totalBudget * Number(budgetAllocation.original)) / 100,
      repurposedBudget: (totalBudget * Number(budgetAllocation.repurposed)) / 100
    });

    const originalBudget = (totalBudget * Number(budgetAllocation.original)) / 100;
    const repurposedBudget = (totalBudget * Number(budgetAllocation.repurposed)) / 100;

    return (
      <div className="space-y-4">
        <h3 className="text-lg font-semibold">Budget Breakdown</h3>
        <div className="bg-black/20 border border-gray-800 rounded-lg p-4">
          <h4 className="font-medium mb-3">Content Type Distribution</h4>
          <div className="space-y-3">
            <div className="flex justify-between items-center">
              <div>
                <span>Original Content</span>
                <span className="text-sm text-gray-400 ml-2">({budgetAllocation.original}%)</span>
              </div>
              <span className="font-medium">{formatMoney(originalBudget)}</span>
            </div>
            <div className="h-2 bg-gray-700 rounded-full mt-1 overflow-hidden">
              <div 
                className="h-full bg-red-500 rounded-full"
                style={{ width: `${budgetAllocation.original}%` }}
              />
            </div>
            <div className="flex justify-between items-center mt-3">
              <div>
                <span>Repurposed Content</span>
                <span className="text-sm text-gray-400 ml-2">({budgetAllocation.repurposed}%)</span>
              </div>
              <span className="font-medium">{formatMoney(repurposedBudget)}</span>
            </div>
            <div className="h-2 bg-gray-700 rounded-full mt-1 overflow-hidden">
              <div 
                className="h-full bg-blue-500 rounded-full"
                style={{ width: `${budgetAllocation.repurposed}%` }}
              />
            </div>
            <div className="flex justify-between items-center mt-4 pt-3 border-t border-gray-700">
              <div>
                <span className="font-medium">Total Budget</span>
              </div>
              <span className="font-medium">${formatMoney(totalBudget)}</span>
            </div>
          </div>
        </div>
      </div>
    );
  };

  const renderViewsBreakdown = () => {
    console.log('Rendering views breakdown with:', {
      viewEstimates: campaign.requirements?.view_estimates,
      rawViewEstimates: campaign.requirements?.view_estimates
    });

    const viewEstimates = campaign.requirements?.view_estimates || calculateCampaignData('view_estimates') as ViewEstimates;
    
    console.log('Calculated view values:', {
      viewEstimates,
      originalPercentage: viewEstimates.total > 0 ? (viewEstimates.original / viewEstimates.total) * 100 : 0,
      repurposedPercentage: viewEstimates.total > 0 ? (viewEstimates.repurposed / viewEstimates.total) * 100 : 0
    });

    const originalPercentage = viewEstimates.total > 0 ? (viewEstimates.original / viewEstimates.total) * 100 : 0;
    const repurposedPercentage = viewEstimates.total > 0 ? (viewEstimates.repurposed / viewEstimates.total) * 100 : 0;

    return (
      <div className="space-y-4">
        <h3 className="text-lg font-semibold">Expected Views Distribution</h3>
        <div className="bg-black/20 border border-gray-800 rounded-lg p-4">
          <h4 className="font-medium mb-3">Content Type Distribution</h4>
          <div className="space-y-3">
            <div className="flex justify-between items-center">
              <div>
                <span>Original Content</span>
                <span className="text-sm text-gray-400 ml-2">({originalPercentage.toFixed(1)}%)</span>
              </div>
              <span className="font-medium">{formatNumber(viewEstimates.original)} views</span>
            </div>
            <div className="h-2 bg-gray-700 rounded-full mt-1 overflow-hidden">
              <div 
                className="h-full bg-purple-500 rounded-full"
                style={{ width: `${originalPercentage}%` }}
              />
            </div>
            <div className="flex justify-between items-center mt-3">
              <div>
                <span>Repurposed Content</span>
                <span className="text-sm text-gray-400 ml-2">({repurposedPercentage.toFixed(1)}%)</span>
              </div>
              <span className="font-medium">{formatNumber(viewEstimates.repurposed)} views</span>
            </div>
            <div className="h-2 bg-gray-700 rounded-full mt-1 overflow-hidden">
              <div 
                className="h-full bg-green-500 rounded-full"
                style={{ width: `${repurposedPercentage}%` }}
              />
            </div>
            <div className="flex justify-between items-center mt-4 pt-3 border-t border-gray-700">
              <div>
                <span className="font-medium">Total Expected Views</span>
              </div>
              <span className="font-medium">{formatNumber(viewEstimates.total)} views</span>
            </div>
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="fixed inset-0 bg-black/80 backdrop-blur-sm flex items-center justify-center p-4 z-50">
      <div className="bg-black/40 border border-gray-800 rounded-lg w-full max-w-6xl max-h-[90vh] overflow-hidden flex flex-col">
        {/* Header */}
        <div className="p-6 border-b border-gray-800 flex items-center justify-between">
          <div>
            <h2 className="text-2xl font-bold text-white">{campaign.title}</h2>
            <div className="flex items-center gap-2 mt-1">
              <span className={`px-2 py-1 text-xs rounded-full ${
                campaign.status === 'active' ? 'bg-green-900/20 text-green-400' :
                campaign.status === 'pending-approval' ? 'bg-yellow-900/20 text-yellow-400' :
                campaign.status === 'rejected' ? 'bg-red-900/20 text-red-400' :
                'bg-gray-900/20 text-gray-400'
              }`}>
                {campaign.status.toUpperCase()}
              </span>
              <span className="text-sm text-gray-400">ID: {campaign.id}</span>
              <span className="text-sm text-gray-400">Business: {campaign.businessName}</span>
            </div>
          </div>
          <button
            onClick={onClose}
            className="p-2 hover:bg-white/10 rounded-full"
          >
            <X className="h-6 w-6" />
          </button>
        </div>

        {/* Navigation Tabs */}
        <div className="flex border-b border-gray-800">
          {[
            { id: 'overview', label: 'Overview', icon: Info },
            ...(isPending ? [] : [
              { id: 'performance', label: 'Performance', icon: BarChart },
              { id: 'creators', label: 'Creators', icon: Users },
              { id: 'content', label: 'Content', icon: FileText }
            ]),
            { id: 'business', label: 'Business Profile', icon: Building2 }
          ].map((tab) => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id as typeof activeTab)}
              className={`flex items-center gap-2 px-6 py-3 relative ${
                activeTab === tab.id ? 'text-white' : 'text-gray-400'
              }`}
            >
              <tab.icon className="h-4 w-4" />
              {tab.label}
              {activeTab === tab.id && (
                <div className="absolute bottom-0 left-0 right-0 h-0.5 bg-red-500" />
              )}
            </button>
          ))}
        </div>

        {/* Content Area */}
        <div className="flex-1 overflow-y-auto p-6">
          {activeTab === 'overview' && (
            <div className="space-y-6">
              {/* Key Metrics */}
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                {renderMetricCard(
                  'Total Budget',
                  `${formatMoney(campaign.budget)}`,
                  <DollarSign className="h-5 w-5 text-green-400" />
                )}
                {!isPending && renderMetricCard(
                  'Budget Spent',
                  `${formatMoney(campaign.spent || 0)}`,
                  <DollarSign className="h-5 w-5 text-yellow-400" />,
                  5.2
                )}
                {renderMetricCard(
                  'Target Views',
                  formatNumber((campaign.requirements?.view_estimates?.total || (calculateCampaignData('view_estimates') as ViewEstimates).total)),
                  <Eye className="h-5 w-5 text-purple-400" />
                )}
                {!isPending && renderMetricCard(
                  'Active Creators',
                  formatNumber(campaign.creatorCount || 0),
                  <Users className="h-5 w-5 text-blue-400" />
                )}
              </div>

              {/* Campaign Details */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="space-y-4">
                  <h3 className="text-lg font-semibold">Campaign Details</h3>
                  <div className="space-y-3">
                    <div className="flex items-center gap-2">
                      <Calendar className="h-4 w-4 text-gray-400" />
                      <span className="text-gray-400">Duration:</span>
                      <span>
                        {new Date(campaign.startDate).toLocaleDateString()} - 
                        {new Date(campaign.endDate).toLocaleDateString()}
                      </span>
                    </div>
                    <div className="flex items-center gap-2">
                      <Globe className="h-4 w-4 text-gray-400" />
                      <span className="text-gray-400">Platforms:</span>
                      <div className="flex flex-wrap gap-2">
                        {campaign.requirements?.platforms?.map((platform) => (
                          <span
                            key={platform}
                            className="px-2 py-1 bg-black/20 border border-gray-700 rounded text-sm"
                          >
                            {platform}
                          </span>
                        ))}
                      </div>
                    </div>
                    <div className="flex items-center gap-2">
                      <Target className="h-4 w-4 text-gray-400" />
                      <span className="text-gray-400">Content Type:</span>
                      <span className="capitalize">{campaign.contentType}</span>
                    </div>
                  </div>
                </div>

                <div className="space-y-4">
                  <h3 className="text-lg font-semibold">Requirements</h3>
                  <div className="space-y-3">
                    <div>
                      <span className="text-gray-400">Payout Rates:</span>
                      <div className="mt-1 space-y-1">
                        {campaign.requirements?.payoutRate?.original && (
                          <p>Original Content: {campaign.requirements.payoutRate.original}</p>
                        )}
                        {campaign.requirements?.payoutRate?.repurposed && (
                          <p>Repurposed Content: {campaign.requirements.payoutRate.repurposed}</p>
                        )}
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              {/* Budget and Views Breakdown */}
              {renderBudgetBreakdown()}
              {renderViewsBreakdown()}

              {/* Content Guidelines */}
              <div className="space-y-4">
                <h3 className="text-lg font-semibold">Content Guidelines</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {/* Original Content Guidelines */}
                  {(campaign.contentType === 'original' || campaign.contentType === 'both') && (
                    <div className="bg-black/20 border border-gray-800 rounded-lg p-4">
                      <h4 className="font-medium text-green-400 mb-3">Original Content</h4>
                      <div className="space-y-3">
                        {/* Guidelines */}
                        <div>
                          <p className="text-sm text-gray-400 mb-2">Guidelines</p>
                          <ul className="list-disc pl-4 space-y-2">
                            {campaign.requirements?.contentGuidelines?.map((guideline, index) => (
                              <li key={index}>{guideline}</li>
                            ))}
                          </ul>
                        </div>
                        
                        {/* Hashtags */}
                        <div>
                          <p className="text-sm text-gray-400 mb-2">Required Hashtag</p>
                          <div className="p-3 bg-green-900/10 border border-green-500 rounded-lg">
                            <p className="font-bold text-green-400">
                              {campaign.requirements?.hashtags?.original || '#BrandAd'}
                            </p>
                            <p className="text-xs text-gray-400 mt-1">Posts without this exact hashtag will be ineligible for payment</p>
                          </div>
                        </div>
                        
                        {/* Brief */}
                        {campaign.brief?.original && (
                          <div>
                            <p className="text-sm text-gray-400 mb-2">Campaign Brief</p>
                            <p className="text-gray-300">{campaign.brief.original}</p>
                          </div>
                        )}
                        
                        {/* Rate */}
                        <div>
                          <p className="text-sm text-gray-400 mb-2">Payout Rate</p>
                          <p className="font-bold text-green-400">
                            {campaign.requirements?.payoutRate?.original || 'Not specified'}
                          </p>
                          <p className="text-xs text-gray-500">per 1M views</p>
                        </div>
                      </div>
                    </div>
                  )}
                  
                  {/* Repurposed Content Guidelines */}
                  {(campaign.contentType === 'repurposed' || campaign.contentType === 'both') && (
                    <div className="bg-black/20 border border-gray-800 rounded-lg p-4">
                      <h4 className="font-medium text-blue-400 mb-3">Repurposed Content</h4>
                      <div className="space-y-3">
                        {/* Guidelines */}
                        <div>
                          <p className="text-sm text-gray-400 mb-2">Guidelines</p>
                          <ul className="list-disc pl-4 space-y-2">
                            {campaign.requirements?.contentGuidelines?.map((guideline, index) => (
                              <li key={index}>{guideline}</li>
                            ))}
                          </ul>
                        </div>
                        
                        {/* Hashtags */}
                        <div>
                          <p className="text-sm text-gray-400 mb-2">Required Hashtag</p>
                          <div className="p-3 bg-blue-900/10 border border-blue-500 rounded-lg">
                            <p className="font-bold text-blue-400">
                              {campaign.requirements?.hashtags?.repurposed || '#BrandPartner'}
                            </p>
                            <p className="text-xs text-gray-400 mt-1">Posts without this exact hashtag will be ineligible for payment</p>
                          </div>
                        </div>
                        
                        {/* Brief */}
                        {campaign.brief?.repurposed && (
                          <div>
                            <p className="text-sm text-gray-400 mb-2">Campaign Brief</p>
                            <p className="text-gray-300">{campaign.brief.repurposed}</p>
                          </div>
                        )}
                        
                        {/* Rate */}
                        <div>
                          <p className="text-sm text-gray-400 mb-2">Payout Rate</p>
                          <p className="font-bold text-blue-400">
                            {campaign.requirements?.payoutRate?.repurposed || 'Not specified'}
                          </p>
                          <p className="text-xs text-gray-500">per 1M views</p>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              </div>
            </div>
          )}

          {activeTab === 'performance' && !isPending && (
            <div className="space-y-6">
              {/* Performance Metrics */}
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                {renderMetricCard(
                  'Engagement Rate',
                  `${((campaign.engagement || 0) / (campaign.views || 1) * 100).toFixed(2)}%`,
                  <TrendingUp className="h-5 w-5 text-green-400" />,
                  3.8
                )}
                {renderMetricCard(
                  'Average View Duration',
                  '2:45',
                  <Eye className="h-5 w-5 text-blue-400" />,
                  1.2
                )}
                {renderMetricCard(
                  'Conversion Rate',
                  '4.2%',
                  <Target className="h-5 w-5 text-purple-400" />,
                  -0.8
                )}
              </div>

              {/* Platform Performance */}
              <div className="space-y-4">
                <h3 className="text-lg font-semibold">Platform Performance</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {campaign.requirements?.platforms?.map((platform) => (
                    <div key={platform} className="bg-black/20 border border-gray-800 rounded-lg p-4">
                      <h4 className="font-medium mb-3">{platform}</h4>
                      <div className="space-y-2">
                        <div className="flex justify-between">
                          <span className="text-gray-400">Views</span>
                          <span>{formatNumber(campaign.platformPerformance?.[platform]?.views || 0)}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-400">Engagement Rate</span>
                          <span>{((campaign.platformPerformance?.[platform]?.engagement || 0) * 100).toFixed(1)}%</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-400">Click-through Rate</span>
                          <span>{((campaign.platformPerformance?.[platform]?.ctr || 0) * 100).toFixed(1)}%</span>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          )}

          {activeTab === 'creators' && !isPending && (
            <div className="space-y-6">
              {/* Creator Stats */}
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                {renderMetricCard(
                  'Total Creators',
                  formatNumber(campaign.creatorCount || 0),
                  <Users className="h-5 w-5 text-blue-400" />
                )}
                {renderMetricCard(
                  'Average Creator Score',
                  '4.8',
                  <Award className="h-5 w-5 text-yellow-400" />
                )}
                {renderMetricCard(
                  'Content Submissions',
                  formatNumber(campaign.metrics?.posts_submitted || 0),
                  <FileText className="h-5 w-5 text-green-400" />
                )}
              </div>

              {/* Top Performing Creators */}
              <div className="space-y-4">
                <h3 className="text-lg font-semibold">Top Performing Creators</h3>
                <div className="space-y-3">
                  {(campaign.topCreators || []).map((creator, index) => (
                    <div key={index} className="bg-black/20 border border-gray-800 rounded-lg p-4">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-3">
                          <div className="w-10 h-10 bg-gray-800 rounded-full" />
                          <div>
                            <h4 className="font-medium">{creator.name}</h4>
                            <p className="text-sm text-gray-400">@{creator.username}</p>
                          </div>
                        </div>
                        <div className="text-right">
                          <p className="font-medium">{formatNumber(creator.views)} views</p>
                          <p className="text-sm text-gray-400">{creator.engagement.toFixed(1)}% engagement</p>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          )}

          {activeTab === 'content' && !isPending && (
            <div className="space-y-6">
              {/* Content Stats */}
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                {renderMetricCard(
                  'Total Content Pieces',
                  formatNumber(campaign.metrics?.contentCount || 0),
                  <FileText className="h-5 w-5 text-blue-400" />
                )}
                {renderMetricCard(
                  'Average Engagement',
                  `${((campaign.metrics?.totalEngagement || 0) / (campaign.metrics?.contentCount || 1)).toFixed(1)}%`,
                  <MessageCircle className="h-5 w-5 text-green-400" />
                )}
                {renderMetricCard(
                  'Content Approval Rate',
                  `${((campaign.metrics?.approvedContent || 0) / (campaign.metrics?.contentCount || 1) * 100).toFixed(0)}%`,
                  <CheckCircle className="h-5 w-5 text-yellow-400" />
                )}
              </div>

              {/* Content Performance */}
              <div className="space-y-4">
                <h3 className="text-lg font-semibold">Top Performing Content</h3>
                <div className="space-y-3">
                  {(campaign.topContent || []).map((content, index) => (
                    <div key={index} className="bg-black/20 border border-gray-800 rounded-lg p-4">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-3">
                          <div className="w-16 h-16 bg-gray-800 rounded" />
                          <div>
                            <h4 className="font-medium">{content.title}</h4>
                            <p className="text-sm text-gray-400">{content.platform} • {content.creator}</p>
                          </div>
                        </div>
                        <div className="text-right">
                          <p className="font-medium">{formatNumber(content.views)} views</p>
                          <p className="text-sm text-gray-400">{content.engagement.toFixed(1)}% engagement</p>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          )}

          {activeTab === 'business' && (
            <div className="space-y-6">
              {/* Business Overview */}
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                {renderMetricCard(
                  'Total Campaigns',
                  formatNumber(campaign.business?.totalCampaigns || 0),
                  <Briefcase className="h-5 w-5 text-blue-400" />
                )}
                {renderMetricCard(
                  'Total Spent',
                  `${formatMoney(campaign.business?.totalSpent || 0)}`,
                  <DollarSign className="h-5 w-5 text-green-400" />
                )}
                {renderMetricCard(
                  'Average Campaign Budget',
                  `${formatMoney(campaign.business?.avgCampaignBudget || 0)}`,
                  <BarChart3 className="h-5 w-5 text-purple-400" />
                )}
              </div>

              {/* Previous Campaigns */}
              <div className="space-y-4">
                <h3 className="text-lg font-semibold">Previous Campaigns</h3>
                <div className="space-y-3">
                  {(campaign.business?.previousCampaigns || []).map((prevCampaign, index) => (
                    <div key={index} className="bg-black/20 border border-gray-800 rounded-lg p-4">
                      <div className="flex items-center justify-between">
                        <div>
                          <h4 className="font-medium">{prevCampaign.title}</h4>
                          <p className="text-sm text-gray-400">
                            {new Date(prevCampaign.startDate).toLocaleDateString()} - 
                            {new Date(prevCampaign.endDate).toLocaleDateString()}
                          </p>
                        </div>
                        <div className="text-right">
                          <p className="font-medium">${formatMoney(prevCampaign.budget)}</p>
                          <p className="text-sm text-gray-400">{formatNumber(prevCampaign.views)} views</p>
                        </div>
                      </div>
                      <div className="mt-2 flex gap-2">
                        {prevCampaign.platforms.map((platform) => (
                          <span
                            key={platform}
                            className="px-2 py-1 text-xs bg-black/20 border border-gray-700 rounded"
                          >
                            {platform}
                          </span>
                        ))}
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              {/* Business Performance Metrics */}
              <div className="space-y-4">
                <h3 className="text-lg font-semibold">Performance History</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="bg-black/20 border border-gray-800 rounded-lg p-4">
                    <h4 className="font-medium mb-3">Campaign Success Rate</h4>
                    <div className="space-y-2">
                      <div className="flex justify-between">
                        <span className="text-gray-400">Completed Successfully</span>
                        <span>{campaign.business?.successRate || 0}%</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-gray-400">Average ROI</span>
                        <span>{campaign.business?.averageRoi || 0}x</span>
                      </div>
                    </div>
                  </div>
                  <div className="bg-black/20 border border-gray-800 rounded-lg p-4">
                    <h4 className="font-medium mb-3">Content Performance</h4>
                    <div className="space-y-2">
                      <div className="flex justify-between">
                        <span className="text-gray-400">Avg. Engagement Rate</span>
                        <span>{campaign.business?.avgEngagementRate || 0}%</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-gray-400">Avg. Views per Campaign</span>
                        <span>{formatNumber(campaign.business?.avgViewsPerCampaign || 0)}</span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>

        {/* Footer Actions */}
        {(onApprove || onReject) && isPending && (
          <div className="p-6 border-t border-gray-800">
            <div className="flex items-center justify-between gap-4">
              <div className="flex-1">
                <input
                  type="text"
                  value={approvalNotes}
                  onChange={(e) => setApprovalNotes(e.target.value)}
                  placeholder="Optional approval notes..."
                  className="w-full px-4 py-2 bg-black/20 border border-gray-700 rounded-lg"
                />
              </div>
              <div className="flex gap-3">
                {onReject && (
                  <button
                    onClick={() => setShowRejectDialog(true)}
                    className="px-4 py-2 border border-red-500 text-red-400 rounded-lg hover:bg-red-900/20 flex items-center gap-2"
                  >
                    <XCircle className="h-4 w-4" />
                    Reject Campaign
                  </button>
                )}
                {onApprove && (
                  <button
                    onClick={() => onApprove(campaign, approvalNotes)}
                    className="px-4 py-2 bg-green-600 hover:bg-green-700 rounded-lg flex items-center gap-2"
                  >
                    <CheckCircle className="h-4 w-4" />
                    Approve Campaign
                  </button>
                )}
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Reject Dialog */}
      {showRejectDialog && (
        <div className="fixed inset-0 bg-black/80 flex items-center justify-center p-4 z-[60]">
          <div className="bg-black/40 border border-gray-800 rounded-lg p-6 w-full max-w-md">
            <h3 className="text-xl font-bold mb-4">Reject Campaign</h3>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm text-gray-400 mb-2">
                  Rejection Reason
                </label>
                <textarea
                  value={rejectReason}
                  onChange={(e) => setRejectReason(e.target.value)}
                  className="w-full h-32 p-3 bg-black/40 border border-gray-700 rounded-lg"
                  placeholder="Explain why this campaign is being rejected..."
                />
              </div>
              
              <div>
                <label className="block text-sm text-gray-400 mb-2">
                  Recommendations for Improvement
                </label>
                <textarea
                  value={recommendations}
                  onChange={(e) => setRecommendations(e.target.value)}
                  className="w-full h-32 p-3 bg-black/40 border border-gray-700 rounded-lg"
                  placeholder="Provide suggestions for how the campaign could be improved..."
                />
              </div>
            </div>
            
            <div className="flex justify-end gap-3 mt-6">
              <button
                onClick={() => {
                  setShowRejectDialog(false);
                  setRejectReason('');
                  setRecommendations('');
                }}
                className="px-4 py-2 border border-gray-700 rounded-lg hover:bg-white/5"
              >
                Cancel
              </button>
              <button
                onClick={handleReject}
                className="px-4 py-2 bg-red-600 hover:bg-red-700 rounded-lg"
                disabled={!rejectReason.trim()}
              >
                Confirm Rejection
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default AdminCampaignDetails; 