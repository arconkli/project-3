import { supabase } from '@/lib/supabaseClient';

interface Brand {
  id: string;
  name: string;
  logo?: string;
  description?: string;
  website?: string;
  industry?: string;
  company_size?: string;
  location?: string;
  contact_email?: string;
  contact_phone?: string;
  created_at?: string;
  updated_at?: string;
}

interface BrandProfile {
  id: string;
  brand_id: string;
  title?: string;
  bio?: string;
  status?: string;
  content_type?: string;
  budget?: number;
  spent?: number;
  start_date?: string;
  end_date?: string;
  metrics?: any;
  requirements?: any;
  created_at?: string;
  updated_at?: string;
}

/**
 * Create a new brand
 */
export const createBrand = async (
  brandData: Partial<Brand>
): Promise<Brand> => {
  try {
    console.log('Creating brand with data:', brandData);
    const { data, error } = await supabase
      .from('brands')
      .insert([{
        ...brandData,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      }])
      .select('*')
      .single();

    if (error) {
      console.error('Error creating brand:', error);
      throw error;
    }

    console.log('Brand created successfully:', data);
    return data;
  } catch (error) {
    console.error('Error in createBrand:', error);
    throw error;
  }
};

/**
 * Get brand by ID
 */
export const getBrandById = async (brandId: string): Promise<Brand | null> => {
  try {
    const { data, error } = await supabase
      .from('brands')
      .select('*')
      .eq('id', brandId)
      .single();

    if (error) {
      throw error;
    }

    return data;
  } catch (error) {
    console.error('Error getting brand:', error);
    throw error;
  }
};

/**
 * Update brand information
 */
export const updateBrand = async (
  brandId: string,
  brandData: Partial<Brand>
): Promise<Brand> => {
  try {
    const { data, error } = await supabase
      .from('brands')
      .update(brandData)
      .eq('id', brandId)
      .select('*')
      .single();

    if (error) {
      throw error;
    }

    return data;
  } catch (error) {
    console.error('Error updating brand:', error);
    throw error;
  }
};

/**
 * Create a brand profile
 */
export const createBrandProfile = async (
  profileData: Partial<BrandProfile>
): Promise<BrandProfile> => {
  try {
    console.log('Creating brand profile with data:', profileData);
    const { data, error } = await supabase
      .from('brand_profiles')
      .insert([{
        ...profileData,
        status: profileData.status || 'pending',
        metrics: profileData.metrics || {},
        requirements: profileData.requirements || {},
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      }])
      .select('*')
      .single();

    if (error) {
      console.error('Error creating brand profile:', error);
      throw error;
    }

    console.log('Brand profile created successfully:', data);
    return data;
  } catch (error) {
    console.error('Error in createBrandProfile:', error);
    throw error;
  }
};

/**
 * Get brand profile by brand ID
 */
export const getBrandProfileByBrandId = async (
  brandId: string
): Promise<BrandProfile | null> => {
  try {
    const { data, error } = await supabase
      .from('brand_profiles')
      .select('*')
      .eq('brand_id', brandId)
      .single();

    if (error && error.code !== 'PGRST116') { // PGRST116 is "No rows returned" error
      throw error;
    }

    return data || null;
  } catch (error) {
    console.error('Error getting brand profile:', error);
    throw error;
  }
};

/**
 * Update brand profile
 */
export const updateBrandProfile = async (
  profileId: string,
  profileData: Partial<BrandProfile>
): Promise<BrandProfile> => {
  try {
    const { data, error } = await supabase
      .from('brand_profiles')
      .update(profileData)
      .eq('id', profileId)
      .select('*')
      .single();

    if (error) {
      throw error;
    }

    return data;
  } catch (error) {
    console.error('Error updating brand profile:', error);
    throw error;
  }
};

// --- NEW FUNCTION START ---

// Interface for the input data to the new function
interface CreateBrandProfileLinkData {
  userId: string;
  companyName: string;
  industry: string;
  contactEmail: string;
  contactPhone?: string;
  website?: string;
}

// Interface matching the brand_profiles table structure from your schema
interface BrandProfileRecord {
  id: string; // UUID, generated by DB
  name: string;
  logo?: string; 
  description?: string;
  website?: string;
  industry?: string;
  company_size?: string;
  location?: string;
  contact_email?: string;
  contact_phone?: string;
  status?: string;
  created_at?: string;
  updated_at?: string;
}

/**
 * Creates a brand profile and links it to a user.
 * Assumes the user already exists in auth and public.users.
 */
export const createBrandProfileAndLink = async (
  data: CreateBrandProfileLinkData
): Promise<BrandProfileRecord> => { 
  console.log('📢 BRAND SERVICE: Creating brand profile and linking user...', { userId: data.userId, companyName: data.companyName });

  let brandProfile: BrandProfileRecord | null = null;

  try {
    // Step 1: Insert into brand_profiles
    console.log('📢 BRAND SERVICE: Inserting into brand_profiles...');
    const { data: profileData, error: profileError } = await supabase
      .from('brand_profiles')
      .insert({
        name: data.companyName,
        description: `${data.companyName} is a company in the ${data.industry} industry.`,
        website: data.website || '',
        industry: data.industry,
        contact_email: data.contactEmail,
        contact_phone: data.contactPhone || '',
        status: 'active', // Default status
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      })
      .select() 
      .single(); 

    if (profileError) {
      console.error('❌ BRAND SERVICE: Error creating brand profile:', profileError);
      throw new Error(`Failed to create brand profile: ${profileError.message}`);
    }
    if (!profileData) {
        console.error('❌ BRAND SERVICE: No data returned after brand profile insert.');
      throw new Error('Failed to create brand profile: No data returned.');
    }
    
    // Use type assertion as Supabase insert return type might be generic
    brandProfile = profileData as BrandProfileRecord; 
    console.log('✅ BRAND SERVICE: Brand profile created:', brandProfile.id);

    // Step 2: Insert into brand_users to link
    console.log('📢 BRAND SERVICE: Linking user to brand profile in brand_users...');
    const { error: linkError } = await supabase
      .from('brand_users')
      .insert({
        user_id: data.userId,
        brand_id: brandProfile.id,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      });

    if (linkError) {
      console.error('❌ BRAND SERVICE: Error linking user to brand profile:', linkError);
      // Consider attempting to delete the profile created in Step 1 if link fails
      // await supabase.from('brand_profiles').delete().eq('id', brandProfile.id); 
      throw new Error(`Failed to link user to brand profile: ${linkError.message}`);
    }

    console.log('✅ BRAND SERVICE: User linked to brand profile successfully.');
    return brandProfile;

  } catch (error) {
    console.error('❌ BRAND SERVICE: Error in createBrandProfileAndLink:', error);
    // If error happened after profile insert but before/during link insert, profile might be orphaned.
    throw error; // Re-throw the original error
  }
}; 
// --- NEW FUNCTION END --- 

/**
 * Fetches the brand profile associated with a given user ID.
 * Handles cases where a user might be linked to multiple brand profiles.
 */
export const getBrandProfileByUserId = async (userId: string) => {
  if (!userId) {
    throw new Error('User ID is required to fetch brand profile.');
  }

  console.log(`[getBrandProfileByUserId] Fetching brand for user ID: ${userId}`);
  
  try {
    // Use the secure RPC function to get brand by user ID
    const { data, error } = await supabase.rpc('get_brand_by_user_id', {
      p_user_id: userId
    });
    
    if (error) {
      console.error(`[getBrandProfileByUserId] Error from get_brand_by_user_id:`, error);
      throw new Error(`Failed to retrieve brand profile: ${error.message}`);
    }
    
    if (!data || !data.success) {
      console.error(`[getBrandProfileByUserId] Function returned non-success:`, data);
      throw new Error(data?.error || 'Failed to retrieve brand profile');
    }
    
    console.log(`[getBrandProfileByUserId] Successfully retrieved brand (ID: ${data.brand_id}) via ${data.found_via}`);
    
    // Return in the expected format - we'll need to fetch the full brand record
    const { data: brandData, error: brandError } = await supabase
      .from('brands')
      .select('*')
      .eq('id', data.brand_id)
      .single();
      
    if (brandError) {
      console.error(`[getBrandProfileByUserId] Error fetching brand details:`, brandError);
      throw new Error(`Found brand ID ${data.brand_id} but failed to fetch details`);
    }
    
    console.log(`[getBrandProfileByUserId] Returning brand details:`, brandData);
    return brandData;
  } catch (error) {
    console.error('[getBrandProfileByUserId] Error retrieving brand profile:', error);
    throw error;
  }
}; 